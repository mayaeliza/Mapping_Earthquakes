// Add GeoJSON data.
let sanFranAirport =
{"type":"FeatureCollection","features":[{
    "type":"Feature",
    "properties":{
        "id":"3469",
        "name":"San Francisco International Airport",
        "city":"San Francisco",
        "country":"United States",
        "faa":"SFO",
        "icao":"KSFO",
        "alt":"13",
        "tz-offset":"-8",
        "dst":"A",
        "tz":"America/Los_Angeles"},
        "geometry":{
            "type":"Point",
            "coordinates":[-122.375,37.61899948120117]}}
]};

// Grabbing our GeoJSON data with call to layer feature
//L.geoJson(sanFranAirport, {
  //onEachFeature: function(feature, layer) {
    //console.log(layer);
    //layer.bindPopup("<h2>" + feature.properties.name + "</h2>");
  //}
//}).addTo(map);




  // We turn each feature into a marker on the map.
  //pointToLayer: function(feature, latlng) {
    //console.log(feature);
    //return L.marker(latlng)
    //.bindPopup("<h2>" + feature.properties.city + "</h2>");
  //}

//}).addTo(map);

// Create a polyline using the line coordinates and make the line red.
//L.polyline(line, {
    //color: "yellow"
  //}).addTo(map);

// Get data from cities.js
//let cityData = cities;

// Loop through the cities array and create one marker for each city.
//cityData.forEach(function(city) {
    //console.log(city)
    //L.circleMarker(city.location, {
      //  radius: city.population/100000
    //})
    //.bindPopup("<h2>" + city.city + ", " + city.state + "</h2> <hr> <h3>Population " + city.population.toLocaleString() + "</h3>")
    //.addTo(map);
   //});

 //  Add a marker to the map for Los Angeles, California.
//L.circleMarker([34.0522, -118.2437], {
  //  radius: 300,
    //color: "black",
    //fillColor: '#ffffa1'
 // }).addTo(map);

// Markers
// let marker = L.marker([34.0522, -118.2437]).addTo(map);
// L.circleMarker([34.0522, -118.2437]).addTo(map);
// L.circle([34.0522, -118.2437], {
    //radius: 100
 //}).addTo(map);

 //Popups
 // Create a style for the lines.
let myStyle = {
  color: "#ffffa1",
  weight: 2
}

// Grabbing our GeoJSON data.
d3.json(torontoData).then(function(data) {
  console.log(data);

// Creating a GeoJSON layer with the retrieved data.
L.geoJson(data, {
  style: myStyle,
  onEachFeature: function(feature, layer) {
    layer.bindPopup("<h3> Airline: " + feature.properties.airline + "<h3> <hr><h3> Destination : " 
    + feature.properties.dst + "</h3>");
  }
})
  
  .addTo(map);
});